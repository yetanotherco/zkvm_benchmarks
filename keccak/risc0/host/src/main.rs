// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{KECCAK_ELF, KECCAK_ID};
use risc0_zkvm::{default_prover, ExecutorEnv, ProverOpts, sha::Digest};
use rand::RngCore;
use rand::rngs::StdRng; // Import StdRng
use rand::SeedableRng;
use tiny_keccak::{Hasher, Keccak};

fn main() {
    let args: Vec<String> = std::env::args().collect();
    let n = args.get(1)
        .and_then(|s| s.parse::<usize>().ok())
        .expect("Should pass the number of bytes to hash");
    println!("Risc0 keccack of length: {} bytes", n);

    let mut data = vec![0u8; n];
    // Seed the RNG for reproducibility.
    let seed: [u8; 32] = [42; 32]; // Fixed seed for reproducibility
    let mut rng = StdRng::from_seed(seed);
    rng.fill_bytes(&mut data); // Fill the data vector with random bytes

    // Initialize tracing
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Send the actual data, not just the length
    let env = ExecutorEnv::builder()
        .write_frame(&data)
        .build()
        .unwrap();

    // We are using the succinct prover options (compressed mode)
    let opts = ProverOpts::succinct();
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove_with_opts(env, KECCAK_ELF, &opts)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Add an extra flag to enable this sanity check
    // Time spent here is not relevant vs the time used for proving
    // But in a general benchmark is not needed
    let output: Digest = receipt.journal.decode().unwrap();
    let expected_keccak = keccak(&data);
    assert_eq!(output, expected_keccak);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(KECCAK_ID)
        .unwrap();
}

fn keccak(bytes: &[u8]) -> Digest {
    // Compute the keccak of length N, using normal Rust code.
    let mut hash = [0u8; 32];
    let mut keccak256 = Keccak::v256();
    keccak256.update(&bytes);
    keccak256.finalize(&mut hash);
    Digest::from_bytes(hash)
}
